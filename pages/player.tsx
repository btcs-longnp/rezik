import { useRef, useEffect, useState, useMemo } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Youtube, { Options } from 'react-youtube';
import YoutubeSong, { newYoutubeSong } from '../models/song/YoutubeSong';
import PlaylistRepository from '../services/firestore/PlaylistRepository';
import Playlist, { newPlaylist } from '../models/songRequest/Playlist';
import MusicController from '../components/MusicController';

const repo = new PlaylistRepository('isling');

const youtubeOpts: Options = {
  playerVars: {
    autoplay: 1,
  },
};

const defaultSong = newYoutubeSong(
  'dQw4w9WgXcQ',
  'Never Gonna Give You Up',
  'https://i.ytimg.com/vi/dQw4w9WgXcQ/hqdefault.jpg'
);

const Player: NextPage = () => {
  const player = useRef<any>();
  const [playlist, setPlaylist] = useState<Playlist>(newPlaylist([], 0));
  const [songIndex, setSongIndex] = useState<number>(0);
  const [song, setSong] = useState<YoutubeSong>(defaultSong);
  const currentRequestId = useRef<string>('');
  const prevPlaylistLength = useRef<number>(0);
  const shadowSongIndex = useRef<number>(0);

  const onReady = (event: { target: any }) => {
    console.log('player: onReady');
    player.current = event.target;
  };
  const handleStageChange = (event: { data: number }) => {
    console.log('player: handleStageChange', event);

    if (event.data === Youtube.PlayerState.ENDED) {
      setSongIndex(songIndex + 1);
    }
  };
  const next = () => {
    setSongIndex(songIndex + 1);
  }
  const previous = () => {
    if (songIndex === 0) {
      return;
    }

    setSongIndex(songIndex - 1);
  }
  const play = () => {};
  const pause = () => {};
  const clearPlaylist = () => {
    repo.removePlaylist()
  }

  useEffect(() => {
    if (playlist.list.length === 0) {
      return;
    }
    const request = playlist.list[songIndex % playlist.list.length];

    // in case playlist changed but current songRequest is not changed
    if (request.id === currentRequestId.current) {
      return;
    }

    setSong(request.song);
    currentRequestId.current = request.id;
  }, [playlist, songIndex]);

  useEffect(() => {
    console.log('player: change song:', song);
    if (!player.current) {
      return;
    }

    player.current.seekTo(0, true);
  }, [song]);

  useEffect(() => {
    console.log('player: change songIndex:', songIndex);
    shadowSongIndex.current = songIndex;
  }, [songIndex]);

  useEffect(() => {
    const unsub = repo.onSnapshotPlaylist((playlist) => {
      console.log('player: playlist changed:', playlist);
      if (!playlist) return;

      setPlaylist(playlist);

      if (
        shadowSongIndex.current >= prevPlaylistLength.current && // all songs are played
        playlist.list.length > prevPlaylistLength.current // playlist added
      ) {
        // then play new song
        setSongIndex(prevPlaylistLength.current);
      }

      prevPlaylistLength.current = playlist.list.length;
    });

    window.onbeforeunload = async () => {
      await repo.removePlaylist();
      window.onbeforeunload = null;
      window.close();
    };

    return () => {
      window.onbeforeunload = null;
      currentRequestId.current = '';
      repo.removePlaylist();
      unsub();
    };
  }, []);

  return (
    <div>
      <Head>
        <title>Rezik - Play Your Album</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main>
        <div className="fixed bottom-16 left-1/2 -translate-x-1/2">
          <MusicController
            play={play}
            pause={pause}
            next={next}
            previous={previous}
            clearPlaylist={clearPlaylist}
          />
        </div>
        <Youtube
          containerClassName='h-screen w-auto'
          className='h-full w-full'
          videoId={song.id}
          opts={youtubeOpts}
          onReady={onReady}
          onStateChange={handleStageChange}
        />
      </main>
    </div>
  );
};

export default Player;
